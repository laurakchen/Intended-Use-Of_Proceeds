ggplot(data.frame(x = gammas), aes(x)) +
geom_histogram(aes(y = stat(density)), col = "red", fill = "white") +
stat_function(fun = dnorm, args = list(mean = 1.5, sd = 1.5), lwd = 2,
col = "blue") +
scale_x_continuous(limits = c(1, 3)) +
theme_bw()
ggplot(data.frame(x = gammas), aes(x)) +
geom_histogram(aes(y = stat(density)), col = "red", fill = "white") +
stat_function(fun = dnorm, args = list(mean = 2, sd = 1.5), lwd = 2,
col = "blue") +
scale_x_continuous(limits = c(1, 3)) +
theme_bw()
ggplot(data.frame(x = gammas), aes(x)) +
geom_histogram(aes(y = stat(density)), col = "red", fill = "white") +
stat_function(fun = dnorm, args = list(mean = 2, sd = 1), lwd = 2,
col = "blue") +
scale_x_continuous(limits = c(1, 3)) +
theme_bw()
ggplot(data.frame(x = gammas), aes(x)) +
geom_histogram(aes(y = stat(density)), col = "red", fill = "white") +
stat_function(fun = dnorm, args = list(mean = 0, sd = 1), lwd = 2,
col = "blue") +
scale_x_continuous(limits = c(1, 3)) +
theme_bw()
ggplot(data.frame(x = gammas), aes(x)) +
geom_histogram(aes(y = stat(density)), col = "red", fill = "white") +
stat_function(fun = dnorm, args = list(mean = 2, sd = 1), lwd = 2,
col = "blue") +
scale_x_continuous(limits = c(1, 3)) +
theme_bw()
gammas
ggplot(data.frame(x = U), aes(x)) +
geom_histogram(aes(y = stat(density)), col = "red", fill = "white") +
stat_function(fun = dnorm, args = list(mean = 2, sd = 1), lwd = 2,
col = "blue") +
scale_x_continuous(limits = c(1, 3)) +
theme_bw()
a = 1000
lambda = 5
gammas <- rgamma(n = 5000, shape = a, rate = lambda)
U = (gammas/sqrt(a)) - (sqrt(a)/lambda)
ggplot(data.frame(x = U), aes(x)) +
geom_histogram(aes(y = stat(density)), col = "red", fill = "white") +
stat_function(fun = dnorm, args = list(mean = 2, sd = 1), lwd = 2,
col = "blue") +
scale_x_continuous(limits = c(1, 3)) +
theme_bw()
U
ggplot(data.frame(x = U), aes(x)) +
geom_histogram(aes(y = stat(density)), col = "red", fill = "white") +
stat_function(fun = dnorm, args = list(mean = 2, sd = 1), lwd = 2,
col = "blue") +
scale_x_continuous(limits = c(-2, 2)) +
theme_bw()
a = 1000
lambda = 5
gammas <- rgamma(n = 5000, shape = a, rate = lambda)
U = (gammas/sqrt(a)) - (sqrt(a)/lambda)
ggplot(data.frame(x = U), aes(x)) +
geom_histogram(aes(y = stat(density)), col = "red", fill = "white") +
stat_function(fun = dnorm, args = list(mean = 0, sd = 1/5), lwd = 2,
col = "blue") +
scale_x_continuous(limits = c(-2, 2)) +
theme_bw()
pnorm(-4.216)
pnorm(-3.53)
exoplanet_data = read.csv("http://www.stat.cmu.edu/~pfreeman/planets.csv", skip=70, header=TRUE)
View(exoplanet_data)
dim(exoplanet_data)
names(exoplanet_data)
colSums(is.na(exoplanet_data))
length(exoplanet_data[which(colSums(is.na(exoplanet_data))), ])
apply(exoplanet_data, 2, function(df){3550-sum(as.numeric(is.na(df)))})
one_word = grep('( |-)',exoplanet_data[,'pl_hostname'])
plhostname = exoplanet_data[,'pl_hostname'][one_word]
numb = grep('(^[0-9]+ |^[0-9]+-)', plhostname)
plhostname = plhostname[-numb]
lower_case = grep('(^[a-z]+ |^[a-z]+-)', plhostname)
plhostname = plhostname[-lower_case]
table = regexpr('( |-)', plhostname, useBytes=TRUE)
table = table-1
substr = substr(plhostname, 1, table)
table(substr)
table(substr[1:14])
sum(table(substr))
table(substr)/sum(table(substr))
2304/3663
nums <- unlist(lapply(exoplanet_data, is.numeric))
nums
exoplanet_data[which(nums == TRUE),]
exo_df = exoplanet_data[which(nums == TRUE),]
View(exo_df)
exo_df = exoplanet_data[, which(nums == TRUE)]
View(exo_df)
df = exoplanet_data[, which(nums == TRUE)]
df = df[, grep("err", colnames(df))]
View(df)
df = exoplanet_data[, which(nums == TRUE)]
df = df[, -grep("err", colnames(df))]
View(df)
df = df[which(complete.cases(df)), ]
View(df)
nums <- unlist(lapply(exoplanet_data, is.numeric))
df = exoplanet_data[, which(nums == TRUE)]
df = df[, -grep("err", colnames(df))]
View(df)
df = df[complete.cases(df), ]
View(df)
p = prcomp(df, scale=TRUE)
p = prcomp(df)
p$rotation
cumsum(p$sdev^2)/sum(p$sdev^2)
palette(rainbow(32))
pc.score = as.matrix(scale(df)) %*% p$rotation
plot(pc.score[,1],pc.score[,2],pch=19,xlab="PC 1",ylab="PC 2")
pc.score = as.matrix(scale(df)) %*% p$rotation
View(pc.score)
pc.score = as.matrix(df) %*% p$rotation
View(pc.score)
plot(pc.score[,1],pc.score[,2],pch=19,xlab="PC 1",ylab="PC 2")
plot(pc.score[,1],pc.score[,2],pch=19,xlab="PC 1",ylab="PC 2", col=color)
plot(pc.score[,1],pc.score[,2],pch=19,xlab="PC 1",ylab="PC 2")
p$rotation
plot(pc.score[,1],pc.score[,2],pch=19,xlab="PC 1",ylab="PC 2", col=ceiling(12*df$loc_rowid))
cumsum(p$sdev^2)/sum(p$sdev^2) # cumulative explained variance
p$rotation
plot(log(exoplanet_data$pl_orbper), exoplanet_data$pl_orbsmax, pch=19)
lines(lowess(log(exoplanet_data$pl_orbper), exoplanet_data$pl_orbsmax))
plot(exoplanet_data$pl_orbsmax, log(exoplanet_data$pl_orbper), pch=19)
lines(lowess(log(exoplanet_data$pl_orbper), exoplanet_data$pl_orbsmax))
lines(lowess(exoplanet_data$pl_orbsmax, log(exoplanet_data$pl_orbper)))
lines(lowess(exoplanet_data$pl_orbsmax, log(exoplanet_data$pl_orbper), 0.01))
View(exoplanet_data)
lines(lowess(exoplanet_data$pl_orbsmax, log(exoplanet_data$pl_orbper), f=0.01))
lines(lowess(exoplanet_data$pl_orbsmax, log(exoplanet_data$pl_orbper)))
lines(lowess(exoplanet_data$pl_orbsmax, log(exoplanet_data$pl_orbper), delta = 0.01))
plot(exoplanet_data$pl_orbsmax, log(exoplanet_data$pl_orbper), pch=19)
lines(lowess(exoplanet_data$pl_orbsmax, log(exoplanet_data$pl_orbper), delta = 0.01))
lines(lowess(exoplanet_data$pl_orbsmax, log(exoplanet_data$pl_orbper), delta = 1))
nums <- unlist(lapply(exoplanet_data, is.numeric))
df = exoplanet_data[, which(nums == TRUE)]
df = df[, -grep("err", colnames(df))]
df = df[complete.cases(df), ]
p = prcomp(df) # PCA
cumsum(p$sdev^2)/sum(p$sdev^2) # cumulative explained variance
# retain first two dimensions
palette(rainbow(32))
pc.score = as.matrix(df) %*% p$rotation
plot(pc.score[,1],pc.score[,2],pch=19,xlab="PC 1",ylab="PC 2", col=ceiling(12*df$loc_rowid))
nums <- unlist(lapply(exoplanet.df, is.numeric))
df = exoplanet.df[, which(nums == TRUE)]
df = df[, -grep("err", colnames(df))]
df = df[complete.cases(df), ]
p = prcomp(df) # PCA
cumsum(p$sdev^2)/sum(p$sdev^2)
palette(rainbow(32))
pc.score = as.matrix(df) %*% p$rotation
plot(pc.score[,1],pc.score[,2],pch=19,xlab="PC 1",ylab="PC 2", col=ceiling(12*df$loc_rowid))
exoplanet.df = read.csv("http://www.stat.cmu.edu/~pfreeman/planets.csv", skip=70, header=TRUE)
nums <- unlist(lapply(exoplanet.df, is.numeric))
df = exoplanet.df[, which(nums == TRUE)]
df = df[, -grep("err", colnames(df))]
df = df[complete.cases(df), ]
p = prcomp(df) # PCA
cumsum(p$sdev^2)/sum(p$sdev^2)
palette(rainbow(32))
pc.score = as.matrix(df) %*% p$rotation
plot(pc.score[,1],pc.score[,2],pch=19,xlab="PC 1",ylab="PC 2", col=ceiling(12*df$loc_rowid))
plot(exoplanet.df$pl_orbsmax, log(exoplanet.df$pl_orbper), pch=19)
lines(lowess(exoplanet.df$pl_orbsmax, log(exoplanet.df$pl_orbper), delta = 0.01))
hab = exoplanet.df[,c('st_teff','st_rad','pl_orbsmax')]
hab = hab[complete.cases(hab),]
hab$st_lum = with(hab, 4*pi*(st_rad^2)*7.15*(10^(-17))*st_teff^4)
hab$rad_inner = with(hab, sqrt(st_lum/1.1))
hab$rad_outer = with(hab, sqrt(st_lum/0.53))
hab_1 = apply(hab, 1, function(x){x[3]<=x[6] & x[3]>=x[5]})
sum(as.numeric(hab_1))/length(hab_1)
nums <- unlist(lapply(exoplanet.df, is.numeric))
df = exoplanet.df[, which(nums == TRUE)]
df = df[, -grep("err", colnames(df))]
df = df[complete.cases(df), ]
p = prcomp(df) # PCA
cumsum(p$sdev^2)/sum(p$sdev^2)
#palette(rainbow(32))
pc.score = as.matrix(df) %*% p$rotation
plot(pc.score[,1],pc.score[,2],pch=19,xlab="PC 1",ylab="PC 2", col=ceiling(12*df$loc_rowid))
plot(pc.score[,1],pc.score[,2],pch=19,xlab="PC 1",ylab="PC 2", col=ceiling(12*df$loc_rowid), xlim=c(-4000, 0), xlab=c(-10000,-3000))
plot(pc.score[,1],pc.score[,2],pch=19,xlab="PC 1",ylab="PC 2", col=ceiling(12*df$loc_rowid), xlim=c(-4000, 0), ylim=c(-10000,-3000))
View(pc.score)
rm(list=ls())
help.search('mean')
help.search("mean")
help.search("mean")
library(help="MASS")
library(help="graphics")
library("graphics")
rm(list=ls())
library(tidyverse)
#  Load the data into R
titanic <- read_csv("https://raw.githubusercontent.com/mateyneykov/315_code_data/master/data/titanic.csv")
#  Load the tidyverse package into R
#  Be sure that this package is installed first!
library(tidyverse)
#  Load the data into R
titanic <- read_csv("https://raw.githubusercontent.com/mateyneykov/315_code_data/master/data/titanic.csv")
View(titanic)
set.seed(400)
# regression with 500 observations
X = runif(500, min=0, max=1)
Y = rnorm(500, exp(X), 1)
lm(Y~X)
# regression with 1 million observations
obs = 1000000
X_big = runif(obs, min=0, max=1)
Y_big = rnorm(obs, exp(X_big), 1)
lm(Y_big~X_big)
plot(x=X, y=Y)
abline(a=0.873, b=1.69, col="blue") # estimated best regression line
abline(a=1, b=0, col="red") # true best regression line
lines(sort(x), exp(sort(x)), col="orange")
lines(sort(X), exp(sort(X)), col="orange")
curve(exp(x), add=TRUE, col="purple") # true regression function
lines(sort(X), exp(sort(X)), col="orange")
curve(exp(x), add=TRUE, col="purple") # true regression function
lines(sort(X), exp(sort(X)), col="orange")
curve(exp(x), add=TRUE, col="purple") # true regression function
plot(x=X, y=Y)
abline(a=0.873, b=1.69, col="blue") # estimated best regression line
abline(a=1, b=0, col="red") # true best regression line
curve(exp(x), add=TRUE, col="purple") # true regression function
curve(exp(x), add=TRUE, col="purple", lwd=3) # true regression function
plot(x=X, y=Y)
abline(a=0.873, b=1.69, col="blue", lwd=3) # estimated best regression line
abline(a=1, b=0, col="red", lwd=3) # true best regression line
curve(exp(x), add=TRUE, col="purple", lwd=3)
set.seed(400)
# regression with 500 observations
X = runif(500, min=0, max=1)
Y = rnorm(500, exp(X), 1)
lin.mod = lm(Y~X)
lin.mod
coeffs = lin.mod$coefficients
plot(x=X, y=Y)
abline(a=0.873, b=1.69, col="blue", lwd=3) # estimated best regression line
abline(a=coeffs[1], b=coeffs[2], col="red", lwd=3) # true best regression line
curve(exp(x), add=TRUE, col="purple", lwd=3)
rm(list=ls())
install.packages("matrixStats")
library(matrixStats)
plot.2a.1 <- ggplot(food, aes(x = proteins_100g, fill = additives_n)) +
geom_histogram(binwidth = 3) +
labs(title = "Distribution of Protein\nby Prescence of Additives",
x = "Protein (per 100g)",
y = "Number of Foods") +
guides(fill = guide_legend((title = "Has Additives"))) +
ajli_315_theme
(tidyverse)
library(gridExtra)
library(ggplot2)
library(tidyverse)
library(gridExtra)
library(ggplot2)
food <- read_csv("https://raw.githubusercontent.com/mateyneykov/315_code_data/master/data/food-facts.csv")
ajli_315_theme <- theme(axis.text = element_text(size = 10,
color = "dark red"),
text = element_text(size = 12, face = "bold",
color = "dark blue"),
plot.background = element_rect(color = "black"),
legend.background = element_rect(color = "black"),
legend.title = element_text("dark green"),
line = element_line(color = "purple"))
plot.2a.1 <- ggplot(food, aes(x = proteins_100g, fill = additives_n)) +
geom_histogram(binwidth = 3) +
labs(title = "Distribution of Protein\nby Prescence of Additives",
x = "Protein (per 100g)",
y = "Number of Foods") +
guides(fill = guide_legend((title = "Has Additives"))) +
ajli_315_theme
plot.2a.2 <- ggplot(food, aes(x = proteins_100g, fill = additives_n)) +
geom_density(alpha = 0.5) +
labs(title = "Distribution of Protein\nby Prescence of Additives",
x = "Protein (per 100g)",
y = "Density") +
guides(fill = guide_legend((title = "Has Additives"))) +
ajli_315_theme
grid.arrange(plot.2a.1, plot.2a.2, nrow = 1)
plot.2b.1 <- ggplot(food, aes(x = log(proteins_100g), fill = additives_n)) +
geom_histogram(binwidth = 0.1) +
labs(title = "Distribution of Log(Protein)\nby Prescence of Additives",
x = "log(Protein) (per 100g)",
y = "Number of Foods") +
guides(fill = guide_legend((title = "Has Additives"))) +
ajli_315_theme
plot.2b.2 <- ggplot(food, aes(x = log(proteins_100g), fill = additives_n)) +
geom_density(alpha = 0.5) +
labs(title = "Distribution of Log(Protein)\nby Prescence of Additives",
x = "log(Protein) (per 100g)",
y = "Density") +
guides(fill = guide_legend((title = "Has Additives"))) +
ajli_315_theme
plot.2b.3 <- ggplot(food, aes(x = proteins_100g, fill = additives_n)) +
geom_histogram(binwidth = 0.1) +
labs(title = "Distribution of Sqrt(Protein)\nby Prescence of Additives",
x = "Sqrt(Protein) (per 100g)",
y = "Number of Foods") +
guides(fill = guide_legend((title = "Has Additives"))) +
ajli_315_theme +
scale_x_sqrt()
plot.2b.4 <- ggplot(food, aes(x = proteins_100g, fill = additives_n)) +
geom_density(alpha = 0.5) +
labs(title = "Distribution of Sqrt(Protein)\nby Prescence of Additives",
x = "Sqrt(Protein) (per 100g)",
y = "Density") +
guides(fill = guide_legend((title = "Has Additives"))) +
ajli_315_theme +
scale_x_sqrt()
grid.arrange(plot.2b.1, plot.2b.2, plot.2b.3, plot.2b.4, nrow = 2)
install.packages("ggthemes")
install.packages("GGally")
gm <- read_csv("http://bioconnector.org/data/gapminder.csv")
gm <- read.csv("http://bioconnector.org/data/gapminder.csv")
gm_sub <- gm %>% filter(year > 2000) #data we would actually use.
install.packages("shinyjs")
install.packages("dendextend")
install.packages("latex2exp")
install.packages("ggforce")
install.packages("ggraph")
install.packages("ggmap")
install.packages("maps")
install.packages("mapproj")
setwd("~/desktop/FinProject")
library(readxl)
df = read_xlsx("IPO_Fee/Consolidated_IPO_v1.xlsx")
df = df[which(!duplicated(df)),] # remove dupes
library(ggplot2)
sentiment_categories = subset(df, select=c(negative, positive,
uncertainty, litigious, strongmodal, weakmodal, constraining))
sentiment_categories
boxplot(sentiment_categories)
ggplot(df, aes(x=sentiment_categories)) +
geom_boxplot()
rlang::last_error()
rlang::last_trace()
ggplot(df, aes(x=uncertainty)) +
geom_boxplot()
ggplot(df, aes(x=c(uncertainty, positive))) +
geom_boxplot()
ggplot(df, aes(x=positive)) +
geom_boxplot()
ggplot(df) +
geom_boxplot(aes(x=positive))
boxplot(sentiment_categories)
boxplot(sentiment_categories, names=c("negative", "positive", "uncertainty", "litigious", "strongmodal", "weakmodal", "constraining"))
boxplot(sentiment_categories, names=c("negative", "positive", "uncertainty", "litigious", "strongmodal", "weakmodal", "constraining"),
xlab="Sentiment Category")
boxplot(c(df$strongmodal, df$weakmodal))
boxplot(sentiment_categories, names=c("negative", "positive", "uncertainty", "litigious", "strongmodal", "weakmodal", "constraining"),
xlab="Sentiment Category")
boxplot(sentiment_categories, names=c("negative", "positive", "uncertainty", "litigious", "strongmodal", "weakmodal", "constraining"),
xlab="Sentiment Category", las=2)
boxplot(sentiment_categories, names=c("negative", "positive", "uncertainty", "litigious", "strongmodal", "weakmodal", "constraining"),
xlab="Sentiment Category", las=2, horizontal = TRUE)
boxplot(sentiment_categories, names=c("negative", "positive", "uncertainty", "litigious", "strongmodal", "weakmodal", "constraining"),
xlab="Sentiment Category", las=2, horizontal = TRUE, width=0.5)
boxplot(sentiment_categories, names=c("negative", "positive", "uncertainty", "litigious", "strongmodal", "weakmodal", "constraining"),
xlab="Sentiment Category", las=2, horizontal = TRUE, width=2)
boxplot(sentiment_categories, names=c("negative", "positive", "uncertainty", "litigious", "strongmodal", "weakmodal", "constraining"),
xlab="Sentiment Category", las=2, horizontal = TRUE, width=rep(0.5, 7))
boxplot(sentiment_categories, names=c("negative", "positive", "uncertainty", "litigious", "strongmodal", "weakmodal", "constraining"),
xlab="Sentiment Category", las=2, horizontal = TRUE, width=rep(0.3, 7))
boxplot(sentiment_categories, names=c("negative", "positive", "uncertainty", "litigious", "strongmodal", "weakmodal", "constraining"),
xlab="Sentiment Category", las=2, horizontal = FALSE, width=rep(0.3, 7))
boxplot(sentiment_categories, names=c("negative", "positive", "uncertainty", "litigious", "strongmodal", "weakmodal", "constraining"),
xlab="Sentiment Category", las=1, horizontal = FALSE, width=rep(0.3, 7))
boxplot(sentiment_categories, names=c("negative", "positive", "uncertainty", "litigious", "strongmodal", "weakmodal", "constraining"),
xlab="Sentiment Category", las=1.5, horizontal = FALSE, width=rep(0.3, 7))
boxplot(sentiment_categories, names=c("negative", "positive", "uncertainty", "litigious", "strongmodal", "weakmodal", "constraining"),
xlab="Sentiment Category", las=3, horizontal = FALSE, width=rep(0.3, 7))
boxplot(sentiment_categories, names=c("negative", "positive", "uncertainty", "litigious", "strongmodal", "weakmodal", "constraining"),
xlab="Sentiment Category", las43, horizontal = FALSE, width=rep(0.3, 7))
boxplot(sentiment_categories, names=c("negative", "positive", "uncertainty", "litigious", "strongmodal", "weakmodal", "constraining"),
xlab="Sentiment Category", las=4, horizontal = FALSE, width=rep(0.3, 7))
boxplot(sentiment_categories, names=c("negative", "positive", "uncertainty", "litigious", "strongmodal", "weakmodal", "constraining"),
xlab="Sentiment Category", las=2, horizontal = FALSE, width=rep(0.3, 7))
ggplot(df) +
geom_boxplot() +
facet_grid(~.sentiment_categories)
ggplot(df) +
geom_boxplot() +
facet_grid(sentiment_categories~.)
boxplot(sentiment_categories, names=c("negative", "positive", "uncertainty", "litigious", "strongmodal", "weakmodal", "constraining"),
xlab="Sentiment Category", las=2, horizontal = FALSE, width=rep(0.3, 7))
par(mar=c(7,5,1,1))
boxplot(sentiment_categories, names=c("negative", "positive", "uncertainty", "litigious", "strongmodal", "weakmodal", "constraining"),
xlab="Sentiment Category", las=2, horizontal = FALSE, width=rep(0.3, 7))
boxplot(sentiment_categories, names=c("negative", "positive", "uncertainty", "litigious", "strongmodal", "weakmodal", "constraining"),
xlab="Sentiment Category", las=2, horizontal = FALSE, width=rep(0.3, 7), ylab="Proportion")
boxplot(sentiment_categories, names=c("negative", "positive", "uncertainty", "litigious", "strongmodal", "weakmodal", "constraining"),
xlab="Sentiment Category", las=2, horizontal = FALSE, width=rep(0.3, 7), ylab="Proportion", main="Distribution of Sentiment Categories")
boxplot(sentiment_categories, names=c("negative", "positive", "uncertainty", "litigious", "strongmodal", "weakmodal", "constraining"),
xlab="Sentiment Category", las=2, horizontal = FALSE, width=rep(0.3, 7), ylab="Proportion", main="Distribution of Sentiment Category Proportion")
boxplot(sentiment_categories, names=c("negative", "positive", "uncertainty", "litigious", "strongmodal", "weakmodal", "constraining"),
las=2, horizontal = FALSE, width=rep(0.3, 7), ylab="Proportion", main="Distribution of Sentiment Category Proportion")
ggplot(df, aes(negative, positive)) +
geom_boxplot()
boxplot(sentiment_categories, xaxt = "n");
par(mar=c(1,1,1,1))
boxplot(sentiment_categories, xaxt = "n");
par(mar=c(7,4,1,1))
boxplot(sentiment_categories, xaxt = "n");
par(mar=c(6,4,1,1))
boxplot(sentiment_categories, xaxt = "n");
par(mar=c(4,4,1,1))
boxplot(sentiment_categories, xaxt = "n");
par(mar=c(8,4,1,1))
boxplot(sentiment_categories, xaxt = "n");
par(mar=c(8,7,1,1))
boxplot(sentiment_categories, xaxt = "n");
par(mar=c(8,7,5,1))
boxplot(sentiment_categories, xaxt = "n");
par(mar=c(8,7,2,1))
boxplot(sentiment_categories, xaxt = "n");
par(mar=c(8,7,2,3))
boxplot(sentiment_categories, xaxt = "n");
par(mar=c(8,7,2,7))
boxplot(sentiment_categories, xaxt = "n");
par(mar=c(8,7,2,5))
boxplot(sentiment_categories, xaxt = "n");
par(mar=c(8,7,2,3))
boxplot(sentiment_categories, xaxt = "n");
par(mar=c(8,7,2,1))
boxplot(sentiment_categories, xaxt = "n");
x = c("negative", "positive", "uncertainty", "litigious", "strongmodal", "weakmodal", "constraining")
text(seq_along(x), par("usr")[3] - 0.5, labels = names(x), srt = 45, adj = 1, xpd = TRUE);
boxplot(sentiment_categories, xaxt = "n");
text(seq_along(x), par("usr")[3] - 0.5, labels = names(x), srt = 45, adj = 1, xpd = TRUE);
boxplot(sentiment_categories, xaxt = "n");
text(seq_along(sentiment_categories), par("usr")[3] - 0.5, labels = names(sentiment_categories), srt = 45, adj = 1, xpd = TRUE);
names(sentiment_categories)
text(x=1:length(df), par("usr")[3] - 0.5, labels = names(sentiment_categories), srt = 45, adj = 1, xpd = TRUE);
boxplot(sentiment_categories, xaxt = "n");
text(x=1:length(df), par("usr")[3] - 0.5, labels = names(sentiment_categories), srt = 45, adj = 1, xpd = TRUE);
boxplot(sentiment_categories, xaxt = "n");
text(x=1:length(df), y=par("usr")[3] - 0.5, labels = names(sentiment_categories), srt = 45, adj = 1, xpd = TRUE);
boxplot(sentiment_categories, xaxt = "n")
text(x=1:length(df), y=par("usr")[3] - 0.5, labels = names(sentiment_categories), srt = 45, adj = 1, xpd = TRUE)
boxplot(sentiment_categories, xaxt = "n")
text(x=1:length(df), y=par("usr")[3] - 0.5, labels = names(sentiment_categories), srt = 45, adj = 1, xpd = TRUE)
```{r}
par(mar = c(6.1, 4.1, 4.1, 4.1) # change the margins
)
boxplot(sentiment_categories, xaxt = "n")
text(x=1:length(df), y=par("usr")[3] - 0.5, labels = names(sentiment_categories), srt = 45, adj = 1, xpd = TRUE)
text(x=1:length(df), y=par("usr")[3], labels = names(sentiment_categories), srt = 45, adj = 1, xpd = TRUE)
text(x=1:length(df), y=par("usr")[3]+0.5, labels = names(sentiment_categories), srt = 45, adj = 1, xpd = TRUE)
text(x=1:length(df), y=par("usr")[3]+0.5, labels = names(sentiment_categories), srt = 45, adj = 1, xpd = NA)
boxplot(sentiment_categories, xaxt = "n")
text(x=1:length(df), y=par("usr")[3]+0.5, labels = names(sentiment_categories), srt = 45, adj = 1, xpd = NA)
boxplot(sentiment_categories, xaxt = "n")
text(x=1:length(df), y=par("usr")[3]+0.5, labels = names(sentiment_categories), srt = 45, adj = 1, xpd = TRUE)
boxplot(sentiment_categories, xaxt = "n")
text(x=1:length(df), y=par("usr")[3], labels = names(sentiment_categories), srt = 45, adj = 1, xpd = TRUE)
boxplot(sentiment_categories, xaxt = "n")
text(x=1:length(df), y=par("usr")[3], labels = names(sentiment_categories), srt = 45, adj = 1, xpd = NA)
text(x=1:length(df), y=par("usr")[3]-0.3, labels = names(sentiment_categories), srt = 45, adj = 1, xpd = NA)
boxplot(sentiment_categories, xaxt = "n")
text(x=1:length(df), y=par("usr")[3]-0.3, labels = names(sentiment_categories), srt = 45, adj = 1, xpd = NA)
boxplot(sentiment_categories, xaxt = "n")
text(x=1:length(df), y=par("usr")[3], labels = names(sentiment_categories), srt = 35, adj = 1, xpd = NA)
boxplot(sentiment_categories, xaxt = "n")
text(x=1:length(df), y=par("usr")[3]-0.1, labels = names(sentiment_categories), srt = 35, adj = 1, xpd = NA)
boxplot(sentiment_categories, xaxt = "n")
text(x=1:length(df), y=par("usr")[3]+0.1, labels = names(sentiment_categories), srt = 35, adj = 1, xpd = NA)
boxplot(sentiment_categories, xaxt = "n")
text(x=1:length(df), y=par("usr")[3]-0.01, labels = names(sentiment_categories), srt = 35, adj = 1, xpd = NA)
boxplot(sentiment_categories, xaxt = "n")
text(x=1:length(df), y=par("usr")[3]-0.01, labels = names(sentiment_categories), srt = 35, xpd = NA)
boxplot(sentiment_categories, xaxt = "n")
text(x=1:length(df), y=par("usr")[3]-0.01, labels = names(sentiment_categories), srt = 35, adj = 0.5, xpd = NA)
boxplot(sentiment_categories, xaxt = "n")
text(x=1:length(df), y=par("usr")[3]-0.01, labels = names(sentiment_categories), srt = 35, adj = 1, xpd = NA)
boxplot(sentiment_categories, xaxt = "n", ylab="Proportion")
text(x=1:length(df), y=par("usr")[3]-0.01, labels = names(sentiment_categories), srt = 35, adj = 1, xpd = NA)
boxplot(sentiment_categories, xaxt = "n", ylab="Proportion")
text(x=seq_along(names(sentiment_categories)), y=par("usr")[3]-0.01, labels = names(sentiment_categories), srt = 35, adj = 1, xpd = NA)
boxplot(sentiment_categories, xaxt = "n", ylab="Proportion")
axis(1, labels = FALSE)    # add tick marks
text(x=seq_along(names(sentiment_categories)), y=par("usr")[3]-0.01,
labels = names(sentiment_categories), srt = 35, adj = 1, xpd = NA)
boxplot(sentiment_categories, xaxt = "n", ylab="Proportion")
axis(1, labels = FALSE)    # add tick marks
text(x=seq_along(names(sentiment_categories)), y=par("usr")[3]-0.02,
labels = names(sentiment_categories), srt = 35, adj = 1, xpd = NA)
mtext("Sentiment Category", side = 1, padj = 6)    # add axis label
mtext("Sentiment Category", side = 1, padj = 7)    # add axis label
boxplot(sentiment_categories, xaxt = "n", ylab="Proportion")
axis(1, labels = FALSE)    # add tick marks
text(x=seq_along(names(sentiment_categories)), y=par("usr")[3]-0.02,
labels = names(sentiment_categories), srt = 35, adj = 1, xpd = NA)
mtext("Sentiment Category", side = 1, padj = 7)    # add axis label
boxplot(sentiment_categories, xaxt = "n", ylab="Proportion",
main="Distribution of Sentiment Category Proportions")
axis(1, labels = FALSE)    # add tick marks
text(x=seq_along(names(sentiment_categories)), y=par("usr")[3]-0.02,
labels = names(sentiment_categories), srt = 35, adj = 1, xpd = NA)
mtext("Sentiment Category", side = 1, padj = 7)    # add axis label
boxplot(sentiment_categories, xaxt = "n", ylab="Proportion",
main="Distribution of Sentiment Category Proportion in Use of Proceeds")
axis(1, labels = FALSE)    # add tick marks
text(x=seq_along(names(sentiment_categories)), y=par("usr")[3]-0.02,
labels = names(sentiment_categories), srt = 35, adj = 1, xpd = NA)
mtext("Sentiment Category", side = 1, padj = 7)    # add axis label
